/* soapMedia2BindingService.cpp
   Generated by gSOAP 2.8.138 for generated.h

gSOAP XML Web services tools
Copyright (C) 2000-2025, Robert van Engelen, Genivia Inc. All Rights Reserved.
The soapcpp2 tool and its generated software are released under the GPL.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial use license is available from Genivia Inc., contact@genivia.com
--------------------------------------------------------------------------------
*/

#include "soapMedia2BindingService.h"

Media2BindingService::Media2BindingService()
{	this->soap = soap_new();
	this->soap_own = true;
	Media2BindingService_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
}

Media2BindingService::Media2BindingService(const Media2BindingService& rhs)
{	this->soap = rhs.soap;
	this->soap_own = false;
}

Media2BindingService::Media2BindingService(struct soap *_soap)
{	this->soap = _soap;
	this->soap_own = false;
	Media2BindingService_init(_soap->imode, _soap->omode);
}

Media2BindingService::Media2BindingService(soap_mode iomode)
{	this->soap = soap_new();
	this->soap_own = true;
	Media2BindingService_init(iomode, iomode);
}

Media2BindingService::Media2BindingService(soap_mode imode, soap_mode omode)
{	this->soap = soap_new();
	this->soap_own = true;
	Media2BindingService_init(imode, omode);
}

Media2BindingService::~Media2BindingService()
{	if (this->soap_own)
	{	Media2BindingService::destroy();
		soap_free(this->soap);
	}
}

void Media2BindingService::Media2BindingService_init(soap_mode imode, soap_mode omode)
{	soap_imode(this->soap, imode);
	soap_omode(this->soap, omode);
	static const struct Namespace namespaces[] = {
        { "SOAP-ENV", "http://www.w3.org/2003/05/soap-envelope", "http://schemas.xmlsoap.org/soap/envelope/", NULL },
        { "SOAP-ENC", "http://www.w3.org/2003/05/soap-encoding", "http://schemas.xmlsoap.org/soap/encoding/", NULL },
        { "xsi", "http://www.w3.org/2001/XMLSchema-instance", "http://www.w3.org/*/XMLSchema-instance", NULL },
        { "xsd", "http://www.w3.org/2001/XMLSchema", "http://www.w3.org/*/XMLSchema", NULL },
        { "c14n", "http://www.w3.org/2001/10/xml-exc-c14n#", NULL, NULL },
        { "ds", "http://www.w3.org/2000/09/xmldsig#", NULL, NULL },
        { "saml1", "urn:oasis:names:tc:SAML:1.0:assertion", NULL, NULL },
        { "saml2", "urn:oasis:names:tc:SAML:2.0:assertion", NULL, NULL },
        { "wsu", "http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd", NULL, NULL },
        { "xenc", "http://www.w3.org/2001/04/xmlenc#", NULL, NULL },
        { "wsc", "http://docs.oasis-open.org/ws-sx/ws-secureconversation/200512", "http://schemas.xmlsoap.org/ws/2005/02/sc", NULL },
        { "wsse", "http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd", "http://docs.oasis-open.org/wss/oasis-wss-wssecurity-secext-1.1.xsd", NULL },
        { "chan", "http://schemas.microsoft.com/ws/2005/02/duplex", NULL, NULL },
        { "wsa5", "http://www.w3.org/2005/08/addressing", "http://schemas.xmlsoap.org/ws/2004/08/addressing", NULL },
        { "wsrfr", "http://docs.oasis-open.org/wsrf/r-2", NULL, NULL },
        { "ns2", "http://www.onvif.org/ver20/analytics/humanface", NULL, NULL },
        { "ns3", "http://www.onvif.org/ver20/analytics/humanbody", NULL, NULL },
        { "xmime", "http://tempuri.org/xmime.xsd", NULL, NULL },
        { "xop", "http://www.w3.org/2004/08/xop/include", NULL, NULL },
        { "tt", "http://www.onvif.org/ver10/schema", NULL, NULL },
        { "wsrfbf", "http://docs.oasis-open.org/wsrf/bf-2", NULL, NULL },
        { "wstop", "http://docs.oasis-open.org/wsn/t-1", NULL, NULL },
        { "ns1", "http://www.onvif.org/ver20/media/wsdl", NULL, NULL },
        { "tad", "http://www.onvif.org/ver10/analyticsdevice/wsdl", NULL, NULL },
        { "tan", "http://www.onvif.org/ver20/analytics/wsdl", NULL, NULL },
        { "tds", "http://www.onvif.org/ver10/device/wsdl", NULL, NULL },
        { "tev", "http://www.onvif.org/ver10/events/wsdl", NULL, NULL },
        { "wsnt", "http://docs.oasis-open.org/wsn/b-2", NULL, NULL },
        { "timg", "http://www.onvif.org/ver20/imaging/wsdl", NULL, NULL },
        { "tls", "http://www.onvif.org/ver10/display/wsdl", NULL, NULL },
        { "tptz", "http://www.onvif.org/ver20/ptz/wsdl", NULL, NULL },
        { "trc", "http://www.onvif.org/ver10/recording/wsdl", NULL, NULL },
        { "trp", "http://www.onvif.org/ver10/replay/wsdl", NULL, NULL },
        { "trt", "http://www.onvif.org/ver10/media/wsdl", NULL, NULL },
        { "trv", "http://www.onvif.org/ver10/receiver/wsdl", NULL, NULL },
        { "tse", "http://www.onvif.org/ver10/search/wsdl", NULL, NULL },
        { NULL, NULL, NULL, NULL} /* end of namespaces[] */
    };
	soap_set_namespaces(this->soap, namespaces);
}

void Media2BindingService::destroy()
{	soap_destroy(this->soap);
	soap_end(this->soap);
}

void Media2BindingService::reset()
{	this->destroy();
	soap_done(this->soap);
	soap_initialize(this->soap);
	Media2BindingService_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
}

#ifndef WITH_PURE_VIRTUAL
Media2BindingService *Media2BindingService::copy()
{	Media2BindingService *dup = SOAP_NEW_UNMANAGED(Media2BindingService);
	if (dup)
	{	soap_done(dup->soap);
		soap_copy_context(dup->soap, this->soap);
	}
	return dup;
}
#endif

Media2BindingService& Media2BindingService::operator=(const Media2BindingService& rhs)
{	if (this->soap != rhs.soap)
	{	if (this->soap_own)
			soap_free(this->soap);
		this->soap = rhs.soap;
		this->soap_own = false;
	}
	return *this;
}

int Media2BindingService::soap_close_socket()
{	return soap_closesock(this->soap);
}

int Media2BindingService::soap_force_close_socket()
{	return soap_force_closesock(this->soap);
}

int Media2BindingService::soap_senderfault(const char *string, const char *detailXML)
{	return ::soap_sender_fault(this->soap, string, detailXML);
}

int Media2BindingService::soap_senderfault(const char *subcodeQName, const char *string, const char *detailXML)
{	return ::soap_sender_fault_subcode(this->soap, subcodeQName, string, detailXML);
}

int Media2BindingService::soap_receiverfault(const char *string, const char *detailXML)
{	return ::soap_receiver_fault(this->soap, string, detailXML);
}

int Media2BindingService::soap_receiverfault(const char *subcodeQName, const char *string, const char *detailXML)
{	return ::soap_receiver_fault_subcode(this->soap, subcodeQName, string, detailXML);
}

void Media2BindingService::soap_print_fault(FILE *fd)
{	::soap_print_fault(this->soap, fd);
}

#ifndef WITH_LEAN
#ifndef WITH_COMPAT
void Media2BindingService::soap_stream_fault(std::ostream& os)
{	::soap_stream_fault(this->soap, os);
}
#endif

char *Media2BindingService::soap_sprint_fault(char *buf, size_t len)
{	return ::soap_sprint_fault(this->soap, buf, len);
}
#endif

void Media2BindingService::soap_noheader()
{	this->soap->header = NULL;
}

void Media2BindingService::soap_header(struct _wsse__Security *wsse__Security, char *wsa5__MessageID, struct wsa5__RelatesToType *wsa5__RelatesTo, struct wsa5__EndpointReferenceType *wsa5__From, struct wsa5__EndpointReferenceType *wsa5__ReplyTo, struct wsa5__EndpointReferenceType *wsa5__FaultTo, char *wsa5__To, char *wsa5__Action, struct chan__ChannelInstanceType *chan__ChannelInstance)
{
	::soap_header(this->soap);
	this->soap->header->wsse__Security = wsse__Security;
	this->soap->header->wsa5__MessageID = wsa5__MessageID;
	this->soap->header->wsa5__RelatesTo = wsa5__RelatesTo;
	this->soap->header->wsa5__From = wsa5__From;
	this->soap->header->wsa5__ReplyTo = wsa5__ReplyTo;
	this->soap->header->wsa5__FaultTo = wsa5__FaultTo;
	this->soap->header->wsa5__To = wsa5__To;
	this->soap->header->wsa5__Action = wsa5__Action;
	this->soap->header->chan__ChannelInstance = chan__ChannelInstance;
}

::SOAP_ENV__Header *Media2BindingService::soap_header()
{	return this->soap->header;
}

#ifndef WITH_NOIO
int Media2BindingService::run(int port, int backlog)
{	if (!soap_valid_socket(this->soap->master) && !soap_valid_socket(this->bind(NULL, port, backlog)))
		return this->soap->error;
	for (;;)
	{	if (!soap_valid_socket(this->accept()))
		{	if (this->soap->errnum == 0) // timeout?
				this->soap->error = SOAP_OK;
			break;
		}
		if (this->serve())
			break;
		this->destroy();
	}
	return this->soap->error;
}

#if defined(WITH_OPENSSL) || defined(WITH_GNUTLS)
int Media2BindingService::ssl_run(int port, int backlog)
{	if (!soap_valid_socket(this->soap->master) && !soap_valid_socket(this->bind(NULL, port, backlog)))
		return this->soap->error;
	for (;;)
	{	if (!soap_valid_socket(this->accept()))
		{	if (this->soap->errnum == 0) // timeout?
				this->soap->error = SOAP_OK;
			break;
		}
		if (this->ssl_accept() || this->serve())
			break;
		this->destroy();
	}
	return this->soap->error;
}
#endif

SOAP_SOCKET Media2BindingService::bind(const char *host, int port, int backlog)
{	return soap_bind(this->soap, host, port, backlog);
}

SOAP_SOCKET Media2BindingService::accept()
{	return soap_accept(this->soap);
}

#if defined(WITH_OPENSSL) || defined(WITH_GNUTLS)
int Media2BindingService::ssl_accept()
{	return soap_ssl_accept(this->soap);
}
#endif
#endif

int Media2BindingService::serve()
{
#ifndef WITH_FASTCGI
	this->soap->keep_alive = this->soap->max_keep_alive + 1;
#endif
	do
	{
#ifndef WITH_FASTCGI
		if (this->soap->keep_alive > 0 && this->soap->max_keep_alive > 0)
			this->soap->keep_alive--;
#endif
		if (soap_begin_serve(this->soap))
		{	if (this->soap->error >= SOAP_STOP)
				continue;
			return this->soap->error;
		}
		if ((dispatch() || (this->soap->fserveloop && this->soap->fserveloop(this->soap))) && this->soap->error && this->soap->error < SOAP_STOP)
		{
#ifdef WITH_FASTCGI
			soap_send_fault(this->soap);
#else
			return soap_send_fault(this->soap);
#endif
		}
#ifdef WITH_FASTCGI
		soap_destroy(this->soap);
		soap_end(this->soap);
	} while (1);
#else
	} while (this->soap->keep_alive);
#endif
	return SOAP_OK;
}

static int serve___ns1__GetServiceCapabilities(struct soap*, Media2BindingService*);
static int serve___ns1__CreateProfile(struct soap*, Media2BindingService*);
static int serve___ns1__GetProfiles(struct soap*, Media2BindingService*);
static int serve___ns1__AddConfiguration(struct soap*, Media2BindingService*);
static int serve___ns1__RemoveConfiguration(struct soap*, Media2BindingService*);
static int serve___ns1__DeleteProfile(struct soap*, Media2BindingService*);
static int serve___ns1__GetVideoSourceConfigurations(struct soap*, Media2BindingService*);
static int serve___ns1__GetVideoEncoderConfigurations(struct soap*, Media2BindingService*);
static int serve___ns1__GetAudioSourceConfigurations(struct soap*, Media2BindingService*);
static int serve___ns1__GetAudioEncoderConfigurations(struct soap*, Media2BindingService*);
static int serve___ns1__GetAnalyticsConfigurations(struct soap*, Media2BindingService*);
static int serve___ns1__GetMetadataConfigurations(struct soap*, Media2BindingService*);
static int serve___ns1__GetAudioOutputConfigurations(struct soap*, Media2BindingService*);
static int serve___ns1__GetAudioDecoderConfigurations(struct soap*, Media2BindingService*);
static int serve___ns1__SetVideoSourceConfiguration(struct soap*, Media2BindingService*);
static int serve___ns1__SetVideoEncoderConfiguration(struct soap*, Media2BindingService*);
static int serve___ns1__SetAudioSourceConfiguration(struct soap*, Media2BindingService*);
static int serve___ns1__SetAudioEncoderConfiguration(struct soap*, Media2BindingService*);
static int serve___ns1__SetMetadataConfiguration(struct soap*, Media2BindingService*);
static int serve___ns1__SetAudioOutputConfiguration(struct soap*, Media2BindingService*);
static int serve___ns1__SetAudioDecoderConfiguration(struct soap*, Media2BindingService*);
static int serve___ns1__GetVideoSourceConfigurationOptions(struct soap*, Media2BindingService*);
static int serve___ns1__GetVideoEncoderConfigurationOptions(struct soap*, Media2BindingService*);
static int serve___ns1__GetAudioSourceConfigurationOptions(struct soap*, Media2BindingService*);
static int serve___ns1__GetAudioEncoderConfigurationOptions(struct soap*, Media2BindingService*);
static int serve___ns1__GetMetadataConfigurationOptions(struct soap*, Media2BindingService*);
static int serve___ns1__GetAudioOutputConfigurationOptions(struct soap*, Media2BindingService*);
static int serve___ns1__GetAudioDecoderConfigurationOptions(struct soap*, Media2BindingService*);
static int serve___ns1__GetVideoEncoderInstances(struct soap*, Media2BindingService*);
static int serve___ns1__GetStreamUri(struct soap*, Media2BindingService*);
static int serve___ns1__StartMulticastStreaming(struct soap*, Media2BindingService*);
static int serve___ns1__StopMulticastStreaming(struct soap*, Media2BindingService*);
static int serve___ns1__SetSynchronizationPoint(struct soap*, Media2BindingService*);
static int serve___ns1__GetSnapshotUri(struct soap*, Media2BindingService*);
static int serve___ns1__GetVideoSourceModes(struct soap*, Media2BindingService*);
static int serve___ns1__SetVideoSourceMode(struct soap*, Media2BindingService*);
static int serve___ns1__GetOSDs(struct soap*, Media2BindingService*);
static int serve___ns1__GetOSDOptions(struct soap*, Media2BindingService*);
static int serve___ns1__SetOSD(struct soap*, Media2BindingService*);
static int serve___ns1__CreateOSD(struct soap*, Media2BindingService*);
static int serve___ns1__DeleteOSD(struct soap*, Media2BindingService*);
static int serve___ns1__GetMasks(struct soap*, Media2BindingService*);
static int serve___ns1__GetMaskOptions(struct soap*, Media2BindingService*);
static int serve___ns1__SetMask(struct soap*, Media2BindingService*);
static int serve___ns1__CreateMask(struct soap*, Media2BindingService*);
static int serve___ns1__DeleteMask(struct soap*, Media2BindingService*);
static int serve___ns1__GetWebRTCConfigurations(struct soap*, Media2BindingService*);
static int serve___ns1__SetWebRTCConfigurations(struct soap*, Media2BindingService*);

int Media2BindingService::dispatch()
{	return dispatch(this->soap);
}

int Media2BindingService::dispatch(struct soap* soap)
{
	Media2BindingService_init(soap->imode, soap->omode);
	if (soap->action)
	{
		const char *soap_action[] = { "http://www.onvif.org/ver20/media/wsdl/AddConfiguration", "http://www.onvif.org/ver20/media/wsdl/CreateMask", "http://www.onvif.org/ver20/media/wsdl/CreateOSD", "http://www.onvif.org/ver20/media/wsdl/CreateProfile", "http://www.onvif.org/ver20/media/wsdl/DeleteMask", "http://www.onvif.org/ver20/media/wsdl/DeleteOSD", "http://www.onvif.org/ver20/media/wsdl/DeleteProfile", "http://www.onvif.org/ver20/media/wsdl/GetAnalyticsConfigurations", "http://www.onvif.org/ver20/media/wsdl/GetAudioDecoderConfigurationOptions", "http://www.onvif.org/ver20/media/wsdl/GetAudioDecoderConfigurations", "http://www.onvif.org/ver20/media/wsdl/GetAudioEncoderConfigurationOptions", "http://www.onvif.org/ver20/media/wsdl/GetAudioEncoderConfigurations", "http://www.onvif.org/ver20/media/wsdl/GetAudioOutputConfigurationOptions", "http://www.onvif.org/ver20/media/wsdl/GetAudioOutputConfigurations", "http://www.onvif.org/ver20/media/wsdl/GetAudioSourceConfigurationOptions", "http://www.onvif.org/ver20/media/wsdl/GetAudioSourceConfigurations/", "http://www.onvif.org/ver20/media/wsdl/GetMaskOptions", "http://www.onvif.org/ver20/media/wsdl/GetMasks", "http://www.onvif.org/ver20/media/wsdl/GetMetadataConfigurationOptions", "http://www.onvif.org/ver20/media/wsdl/GetMetadataConfigurations", "http://www.onvif.org/ver20/media/wsdl/GetOSDOptions", "http://www.onvif.org/ver20/media/wsdl/GetOSDs", "http://www.onvif.org/ver20/media/wsdl/GetProfiles", "http://www.onvif.org/ver20/media/wsdl/GetServiceCapabilities", "http://www.onvif.org/ver20/media/wsdl/GetSnapshotUri", "http://www.onvif.org/ver20/media/wsdl/GetStreamUri", "http://www.onvif.org/ver20/media/wsdl/GetVideoEncoderConfigurationOptions", "http://www.onvif.org/ver20/media/wsdl/GetVideoEncoderConfigurations", "http://www.onvif.org/ver20/media/wsdl/GetVideoEncoderInstances", "http://www.onvif.org/ver20/media/wsdl/GetVideoSourceConfigurationOptions/", "http://www.onvif.org/ver20/media/wsdl/GetVideoSourceConfigurations", "http://www.onvif.org/ver20/media/wsdl/GetVideoSourceModes", "http://www.onvif.org/ver20/media/wsdl/GetWebRTCConfigurations", "http://www.onvif.org/ver20/media/wsdl/RemoveConfiguration", "http://www.onvif.org/ver20/media/wsdl/SetAudioDecoderConfiguration", "http://www.onvif.org/ver20/media/wsdl/SetAudioEncoderConfiguration", "http://www.onvif.org/ver20/media/wsdl/SetAudioOutputConfiguration", "http://www.onvif.org/ver20/media/wsdl/SetAudioSourceConfiguration", "http://www.onvif.org/ver20/media/wsdl/SetMask", "http://www.onvif.org/ver20/media/wsdl/SetMetadataConfiguration", "http://www.onvif.org/ver20/media/wsdl/SetOSD", "http://www.onvif.org/ver20/media/wsdl/SetSynchronizationPoint", "http://www.onvif.org/ver20/media/wsdl/SetVideoEncoderConfiguration", "http://www.onvif.org/ver20/media/wsdl/SetVideoSourceConfiguration", "http://www.onvif.org/ver20/media/wsdl/SetVideoSourceMode", "http://www.onvif.org/ver20/media/wsdl/SetWebRTCConfigurations", "http://www.onvif.org/ver20/media/wsdl/StartMulticastStreaming", "http://www.onvif.org/ver20/media/wsdl/StopMulticastStreaming",  };
		switch (soap_binary_search_string(soap_action, 48, soap->action))
		{
			case 0:	
				return serve___ns1__AddConfiguration(soap, this);
			case 1:	
				return serve___ns1__CreateMask(soap, this);
			case 2:	
				return serve___ns1__CreateOSD(soap, this);
			case 3:	
				return serve___ns1__CreateProfile(soap, this);
			case 4:	
				return serve___ns1__DeleteMask(soap, this);
			case 5:	
				return serve___ns1__DeleteOSD(soap, this);
			case 6:	
				return serve___ns1__DeleteProfile(soap, this);
			case 7:	
				return serve___ns1__GetAnalyticsConfigurations(soap, this);
			case 8:	
				return serve___ns1__GetAudioDecoderConfigurationOptions(soap, this);
			case 9:	
				return serve___ns1__GetAudioDecoderConfigurations(soap, this);
			case 10:	
				return serve___ns1__GetAudioEncoderConfigurationOptions(soap, this);
			case 11:	
				return serve___ns1__GetAudioEncoderConfigurations(soap, this);
			case 12:	
				return serve___ns1__GetAudioOutputConfigurationOptions(soap, this);
			case 13:	
				return serve___ns1__GetAudioOutputConfigurations(soap, this);
			case 14:	
				return serve___ns1__GetAudioSourceConfigurationOptions(soap, this);
			case 15:	
				return serve___ns1__GetAudioSourceConfigurations(soap, this);
			case 16:	
				return serve___ns1__GetMaskOptions(soap, this);
			case 17:	
				return serve___ns1__GetMasks(soap, this);
			case 18:	
				return serve___ns1__GetMetadataConfigurationOptions(soap, this);
			case 19:	
				return serve___ns1__GetMetadataConfigurations(soap, this);
			case 20:	
				return serve___ns1__GetOSDOptions(soap, this);
			case 21:	
				return serve___ns1__GetOSDs(soap, this);
			case 22:	
				return serve___ns1__GetProfiles(soap, this);
			case 23:	
				return serve___ns1__GetServiceCapabilities(soap, this);
			case 24:	
				return serve___ns1__GetSnapshotUri(soap, this);
			case 25:	
				return serve___ns1__GetStreamUri(soap, this);
			case 26:	
				return serve___ns1__GetVideoEncoderConfigurationOptions(soap, this);
			case 27:	
				return serve___ns1__GetVideoEncoderConfigurations(soap, this);
			case 28:	
				return serve___ns1__GetVideoEncoderInstances(soap, this);
			case 29:	
				return serve___ns1__GetVideoSourceConfigurationOptions(soap, this);
			case 30:	
				return serve___ns1__GetVideoSourceConfigurations(soap, this);
			case 31:	
				return serve___ns1__GetVideoSourceModes(soap, this);
			case 32:	
				return serve___ns1__GetWebRTCConfigurations(soap, this);
			case 33:	
				return serve___ns1__RemoveConfiguration(soap, this);
			case 34:	
				return serve___ns1__SetAudioDecoderConfiguration(soap, this);
			case 35:	
				return serve___ns1__SetAudioEncoderConfiguration(soap, this);
			case 36:	
				return serve___ns1__SetAudioOutputConfiguration(soap, this);
			case 37:	
				return serve___ns1__SetAudioSourceConfiguration(soap, this);
			case 38:	
				return serve___ns1__SetMask(soap, this);
			case 39:	
				return serve___ns1__SetMetadataConfiguration(soap, this);
			case 40:	
				return serve___ns1__SetOSD(soap, this);
			case 41:	
				return serve___ns1__SetSynchronizationPoint(soap, this);
			case 42:	
				return serve___ns1__SetVideoEncoderConfiguration(soap, this);
			case 43:	
				return serve___ns1__SetVideoSourceConfiguration(soap, this);
			case 44:	
				return serve___ns1__SetVideoSourceMode(soap, this);
			case 45:	
				return serve___ns1__SetWebRTCConfigurations(soap, this);
			case 46:	
				return serve___ns1__StartMulticastStreaming(soap, this);
			case 47:	
				return serve___ns1__StopMulticastStreaming(soap, this);
		}
	}
	(void)soap_peek_element(soap);
	if (!soap_match_tag(soap, soap->tag, "ns1:GetServiceCapabilities"))
		return serve___ns1__GetServiceCapabilities(soap, this);
	if (!soap_match_tag(soap, soap->tag, "ns1:CreateProfile"))
		return serve___ns1__CreateProfile(soap, this);
	if (!soap_match_tag(soap, soap->tag, "ns1:GetProfiles"))
		return serve___ns1__GetProfiles(soap, this);
	if (!soap_match_tag(soap, soap->tag, "ns1:AddConfiguration"))
		return serve___ns1__AddConfiguration(soap, this);
	if (!soap_match_tag(soap, soap->tag, "ns1:RemoveConfiguration"))
		return serve___ns1__RemoveConfiguration(soap, this);
	if (!soap_match_tag(soap, soap->tag, "ns1:DeleteProfile"))
		return serve___ns1__DeleteProfile(soap, this);
	if (!soap_match_tag(soap, soap->tag, "ns1:GetVideoSourceConfigurations"))
		return serve___ns1__GetVideoSourceConfigurations(soap, this);
	if (!soap_match_tag(soap, soap->tag, "ns1:GetVideoEncoderConfigurations"))
		return serve___ns1__GetVideoEncoderConfigurations(soap, this);
	if (!soap_match_tag(soap, soap->tag, "ns1:GetAudioSourceConfigurations"))
		return serve___ns1__GetAudioSourceConfigurations(soap, this);
	if (!soap_match_tag(soap, soap->tag, "ns1:GetAudioEncoderConfigurations"))
		return serve___ns1__GetAudioEncoderConfigurations(soap, this);
	if (!soap_match_tag(soap, soap->tag, "ns1:GetAnalyticsConfigurations"))
		return serve___ns1__GetAnalyticsConfigurations(soap, this);
	if (!soap_match_tag(soap, soap->tag, "ns1:GetMetadataConfigurations"))
		return serve___ns1__GetMetadataConfigurations(soap, this);
	if (!soap_match_tag(soap, soap->tag, "ns1:GetAudioOutputConfigurations"))
		return serve___ns1__GetAudioOutputConfigurations(soap, this);
	if (!soap_match_tag(soap, soap->tag, "ns1:GetAudioDecoderConfigurations"))
		return serve___ns1__GetAudioDecoderConfigurations(soap, this);
	if (!soap_match_tag(soap, soap->tag, "ns1:SetVideoSourceConfiguration"))
		return serve___ns1__SetVideoSourceConfiguration(soap, this);
	if (!soap_match_tag(soap, soap->tag, "ns1:SetVideoEncoderConfiguration"))
		return serve___ns1__SetVideoEncoderConfiguration(soap, this);
	if (!soap_match_tag(soap, soap->tag, "ns1:SetAudioSourceConfiguration"))
		return serve___ns1__SetAudioSourceConfiguration(soap, this);
	if (!soap_match_tag(soap, soap->tag, "ns1:SetAudioEncoderConfiguration"))
		return serve___ns1__SetAudioEncoderConfiguration(soap, this);
	if (!soap_match_tag(soap, soap->tag, "ns1:SetMetadataConfiguration"))
		return serve___ns1__SetMetadataConfiguration(soap, this);
	if (!soap_match_tag(soap, soap->tag, "ns1:SetAudioOutputConfiguration"))
		return serve___ns1__SetAudioOutputConfiguration(soap, this);
	if (!soap_match_tag(soap, soap->tag, "ns1:SetAudioDecoderConfiguration"))
		return serve___ns1__SetAudioDecoderConfiguration(soap, this);
	if (!soap_match_tag(soap, soap->tag, "ns1:GetVideoSourceConfigurationOptions"))
		return serve___ns1__GetVideoSourceConfigurationOptions(soap, this);
	if (!soap_match_tag(soap, soap->tag, "ns1:GetVideoEncoderConfigurationOptions"))
		return serve___ns1__GetVideoEncoderConfigurationOptions(soap, this);
	if (!soap_match_tag(soap, soap->tag, "ns1:GetAudioSourceConfigurationOptions"))
		return serve___ns1__GetAudioSourceConfigurationOptions(soap, this);
	if (!soap_match_tag(soap, soap->tag, "ns1:GetAudioEncoderConfigurationOptions"))
		return serve___ns1__GetAudioEncoderConfigurationOptions(soap, this);
	if (!soap_match_tag(soap, soap->tag, "ns1:GetMetadataConfigurationOptions"))
		return serve___ns1__GetMetadataConfigurationOptions(soap, this);
	if (!soap_match_tag(soap, soap->tag, "ns1:GetAudioOutputConfigurationOptions"))
		return serve___ns1__GetAudioOutputConfigurationOptions(soap, this);
	if (!soap_match_tag(soap, soap->tag, "ns1:GetAudioDecoderConfigurationOptions"))
		return serve___ns1__GetAudioDecoderConfigurationOptions(soap, this);
	if (!soap_match_tag(soap, soap->tag, "ns1:GetVideoEncoderInstances"))
		return serve___ns1__GetVideoEncoderInstances(soap, this);
	if (!soap_match_tag(soap, soap->tag, "ns1:GetStreamUri"))
		return serve___ns1__GetStreamUri(soap, this);
	if (!soap_match_tag(soap, soap->tag, "ns1:StartMulticastStreaming"))
		return serve___ns1__StartMulticastStreaming(soap, this);
	if (!soap_match_tag(soap, soap->tag, "ns1:StopMulticastStreaming"))
		return serve___ns1__StopMulticastStreaming(soap, this);
	if (!soap_match_tag(soap, soap->tag, "ns1:SetSynchronizationPoint"))
		return serve___ns1__SetSynchronizationPoint(soap, this);
	if (!soap_match_tag(soap, soap->tag, "ns1:GetSnapshotUri"))
		return serve___ns1__GetSnapshotUri(soap, this);
	if (!soap_match_tag(soap, soap->tag, "ns1:GetVideoSourceModes"))
		return serve___ns1__GetVideoSourceModes(soap, this);
	if (!soap_match_tag(soap, soap->tag, "ns1:SetVideoSourceMode"))
		return serve___ns1__SetVideoSourceMode(soap, this);
	if (!soap_match_tag(soap, soap->tag, "ns1:GetOSDs"))
		return serve___ns1__GetOSDs(soap, this);
	if (!soap_match_tag(soap, soap->tag, "ns1:GetOSDOptions"))
		return serve___ns1__GetOSDOptions(soap, this);
	if (!soap_match_tag(soap, soap->tag, "ns1:SetOSD"))
		return serve___ns1__SetOSD(soap, this);
	if (!soap_match_tag(soap, soap->tag, "ns1:CreateOSD"))
		return serve___ns1__CreateOSD(soap, this);
	if (!soap_match_tag(soap, soap->tag, "ns1:DeleteOSD"))
		return serve___ns1__DeleteOSD(soap, this);
	if (!soap_match_tag(soap, soap->tag, "ns1:GetMasks"))
		return serve___ns1__GetMasks(soap, this);
	if (!soap_match_tag(soap, soap->tag, "ns1:GetMaskOptions"))
		return serve___ns1__GetMaskOptions(soap, this);
	if (!soap_match_tag(soap, soap->tag, "ns1:SetMask"))
		return serve___ns1__SetMask(soap, this);
	if (!soap_match_tag(soap, soap->tag, "ns1:CreateMask"))
		return serve___ns1__CreateMask(soap, this);
	if (!soap_match_tag(soap, soap->tag, "ns1:DeleteMask"))
		return serve___ns1__DeleteMask(soap, this);
	if (!soap_match_tag(soap, soap->tag, "ns1:GetWebRTCConfigurations"))
		return serve___ns1__GetWebRTCConfigurations(soap, this);
	if (!soap_match_tag(soap, soap->tag, "ns1:SetWebRTCConfigurations"))
		return serve___ns1__SetWebRTCConfigurations(soap, this);
	return soap->error = SOAP_NO_METHOD;
}

static int serve___ns1__GetServiceCapabilities(struct soap *soap, Media2BindingService *service)
{	struct __ns1__GetServiceCapabilities soap_tmp___ns1__GetServiceCapabilities;
	_ns1__GetServiceCapabilitiesResponse ns1__GetServiceCapabilitiesResponse;
	ns1__GetServiceCapabilitiesResponse.soap_default(soap);
	soap_default___ns1__GetServiceCapabilities(soap, &soap_tmp___ns1__GetServiceCapabilities);
	if (!soap_get___ns1__GetServiceCapabilities(soap, &soap_tmp___ns1__GetServiceCapabilities, "-ns1:GetServiceCapabilities", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->GetServiceCapabilities(soap_tmp___ns1__GetServiceCapabilities.ns1__GetServiceCapabilities, ns1__GetServiceCapabilitiesResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL; /* use SOAP literal style */
	soap_serializeheader(soap);
	ns1__GetServiceCapabilitiesResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || ns1__GetServiceCapabilitiesResponse.soap_put(soap, "ns1:GetServiceCapabilitiesResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || ns1__GetServiceCapabilitiesResponse.soap_put(soap, "ns1:GetServiceCapabilitiesResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___ns1__CreateProfile(struct soap *soap, Media2BindingService *service)
{	struct __ns1__CreateProfile soap_tmp___ns1__CreateProfile;
	_ns1__CreateProfileResponse ns1__CreateProfileResponse;
	ns1__CreateProfileResponse.soap_default(soap);
	soap_default___ns1__CreateProfile(soap, &soap_tmp___ns1__CreateProfile);
	if (!soap_get___ns1__CreateProfile(soap, &soap_tmp___ns1__CreateProfile, "-ns1:CreateProfile", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->CreateProfile(soap_tmp___ns1__CreateProfile.ns1__CreateProfile, ns1__CreateProfileResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL; /* use SOAP literal style */
	soap_serializeheader(soap);
	ns1__CreateProfileResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || ns1__CreateProfileResponse.soap_put(soap, "ns1:CreateProfileResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || ns1__CreateProfileResponse.soap_put(soap, "ns1:CreateProfileResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___ns1__GetProfiles(struct soap *soap, Media2BindingService *service)
{	struct __ns1__GetProfiles soap_tmp___ns1__GetProfiles;
	_ns1__GetProfilesResponse ns1__GetProfilesResponse;
	ns1__GetProfilesResponse.soap_default(soap);
	soap_default___ns1__GetProfiles(soap, &soap_tmp___ns1__GetProfiles);
	if (!soap_get___ns1__GetProfiles(soap, &soap_tmp___ns1__GetProfiles, "-ns1:GetProfiles", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->GetProfiles(soap_tmp___ns1__GetProfiles.ns1__GetProfiles, ns1__GetProfilesResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL; /* use SOAP literal style */
	soap_serializeheader(soap);
	ns1__GetProfilesResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || ns1__GetProfilesResponse.soap_put(soap, "ns1:GetProfilesResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || ns1__GetProfilesResponse.soap_put(soap, "ns1:GetProfilesResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___ns1__AddConfiguration(struct soap *soap, Media2BindingService *service)
{	struct __ns1__AddConfiguration soap_tmp___ns1__AddConfiguration;
	_ns1__AddConfigurationResponse ns1__AddConfigurationResponse;
	ns1__AddConfigurationResponse.soap_default(soap);
	soap_default___ns1__AddConfiguration(soap, &soap_tmp___ns1__AddConfiguration);
	if (!soap_get___ns1__AddConfiguration(soap, &soap_tmp___ns1__AddConfiguration, "-ns1:AddConfiguration", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->AddConfiguration(soap_tmp___ns1__AddConfiguration.ns1__AddConfiguration, ns1__AddConfigurationResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL; /* use SOAP literal style */
	soap_serializeheader(soap);
	ns1__AddConfigurationResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || ns1__AddConfigurationResponse.soap_put(soap, "ns1:AddConfigurationResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || ns1__AddConfigurationResponse.soap_put(soap, "ns1:AddConfigurationResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___ns1__RemoveConfiguration(struct soap *soap, Media2BindingService *service)
{	struct __ns1__RemoveConfiguration soap_tmp___ns1__RemoveConfiguration;
	_ns1__RemoveConfigurationResponse ns1__RemoveConfigurationResponse;
	ns1__RemoveConfigurationResponse.soap_default(soap);
	soap_default___ns1__RemoveConfiguration(soap, &soap_tmp___ns1__RemoveConfiguration);
	if (!soap_get___ns1__RemoveConfiguration(soap, &soap_tmp___ns1__RemoveConfiguration, "-ns1:RemoveConfiguration", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->RemoveConfiguration(soap_tmp___ns1__RemoveConfiguration.ns1__RemoveConfiguration, ns1__RemoveConfigurationResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL; /* use SOAP literal style */
	soap_serializeheader(soap);
	ns1__RemoveConfigurationResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || ns1__RemoveConfigurationResponse.soap_put(soap, "ns1:RemoveConfigurationResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || ns1__RemoveConfigurationResponse.soap_put(soap, "ns1:RemoveConfigurationResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___ns1__DeleteProfile(struct soap *soap, Media2BindingService *service)
{	struct __ns1__DeleteProfile soap_tmp___ns1__DeleteProfile;
	_ns1__DeleteProfileResponse ns1__DeleteProfileResponse;
	ns1__DeleteProfileResponse.soap_default(soap);
	soap_default___ns1__DeleteProfile(soap, &soap_tmp___ns1__DeleteProfile);
	if (!soap_get___ns1__DeleteProfile(soap, &soap_tmp___ns1__DeleteProfile, "-ns1:DeleteProfile", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->DeleteProfile(soap_tmp___ns1__DeleteProfile.ns1__DeleteProfile, ns1__DeleteProfileResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL; /* use SOAP literal style */
	soap_serializeheader(soap);
	ns1__DeleteProfileResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || ns1__DeleteProfileResponse.soap_put(soap, "ns1:DeleteProfileResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || ns1__DeleteProfileResponse.soap_put(soap, "ns1:DeleteProfileResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___ns1__GetVideoSourceConfigurations(struct soap *soap, Media2BindingService *service)
{	struct __ns1__GetVideoSourceConfigurations soap_tmp___ns1__GetVideoSourceConfigurations;
	_ns1__GetVideoSourceConfigurationsResponse ns1__GetVideoSourceConfigurationsResponse;
	ns1__GetVideoSourceConfigurationsResponse.soap_default(soap);
	soap_default___ns1__GetVideoSourceConfigurations(soap, &soap_tmp___ns1__GetVideoSourceConfigurations);
	if (!soap_get___ns1__GetVideoSourceConfigurations(soap, &soap_tmp___ns1__GetVideoSourceConfigurations, "-ns1:GetVideoSourceConfigurations", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->GetVideoSourceConfigurations(soap_tmp___ns1__GetVideoSourceConfigurations.ns1__GetVideoSourceConfigurations, ns1__GetVideoSourceConfigurationsResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL; /* use SOAP literal style */
	soap_serializeheader(soap);
	ns1__GetVideoSourceConfigurationsResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || ns1__GetVideoSourceConfigurationsResponse.soap_put(soap, "ns1:GetVideoSourceConfigurationsResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || ns1__GetVideoSourceConfigurationsResponse.soap_put(soap, "ns1:GetVideoSourceConfigurationsResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___ns1__GetVideoEncoderConfigurations(struct soap *soap, Media2BindingService *service)
{	struct __ns1__GetVideoEncoderConfigurations soap_tmp___ns1__GetVideoEncoderConfigurations;
	_ns1__GetVideoEncoderConfigurationsResponse ns1__GetVideoEncoderConfigurationsResponse;
	ns1__GetVideoEncoderConfigurationsResponse.soap_default(soap);
	soap_default___ns1__GetVideoEncoderConfigurations(soap, &soap_tmp___ns1__GetVideoEncoderConfigurations);
	if (!soap_get___ns1__GetVideoEncoderConfigurations(soap, &soap_tmp___ns1__GetVideoEncoderConfigurations, "-ns1:GetVideoEncoderConfigurations", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->GetVideoEncoderConfigurations(soap_tmp___ns1__GetVideoEncoderConfigurations.ns1__GetVideoEncoderConfigurations, ns1__GetVideoEncoderConfigurationsResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL; /* use SOAP literal style */
	soap_serializeheader(soap);
	ns1__GetVideoEncoderConfigurationsResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || ns1__GetVideoEncoderConfigurationsResponse.soap_put(soap, "ns1:GetVideoEncoderConfigurationsResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || ns1__GetVideoEncoderConfigurationsResponse.soap_put(soap, "ns1:GetVideoEncoderConfigurationsResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___ns1__GetAudioSourceConfigurations(struct soap *soap, Media2BindingService *service)
{	struct __ns1__GetAudioSourceConfigurations soap_tmp___ns1__GetAudioSourceConfigurations;
	_ns1__GetAudioSourceConfigurationsResponse ns1__GetAudioSourceConfigurationsResponse;
	ns1__GetAudioSourceConfigurationsResponse.soap_default(soap);
	soap_default___ns1__GetAudioSourceConfigurations(soap, &soap_tmp___ns1__GetAudioSourceConfigurations);
	if (!soap_get___ns1__GetAudioSourceConfigurations(soap, &soap_tmp___ns1__GetAudioSourceConfigurations, "-ns1:GetAudioSourceConfigurations", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->GetAudioSourceConfigurations(soap_tmp___ns1__GetAudioSourceConfigurations.ns1__GetAudioSourceConfigurations, ns1__GetAudioSourceConfigurationsResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL; /* use SOAP literal style */
	soap_serializeheader(soap);
	ns1__GetAudioSourceConfigurationsResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || ns1__GetAudioSourceConfigurationsResponse.soap_put(soap, "ns1:GetAudioSourceConfigurationsResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || ns1__GetAudioSourceConfigurationsResponse.soap_put(soap, "ns1:GetAudioSourceConfigurationsResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___ns1__GetAudioEncoderConfigurations(struct soap *soap, Media2BindingService *service)
{	struct __ns1__GetAudioEncoderConfigurations soap_tmp___ns1__GetAudioEncoderConfigurations;
	_ns1__GetAudioEncoderConfigurationsResponse ns1__GetAudioEncoderConfigurationsResponse;
	ns1__GetAudioEncoderConfigurationsResponse.soap_default(soap);
	soap_default___ns1__GetAudioEncoderConfigurations(soap, &soap_tmp___ns1__GetAudioEncoderConfigurations);
	if (!soap_get___ns1__GetAudioEncoderConfigurations(soap, &soap_tmp___ns1__GetAudioEncoderConfigurations, "-ns1:GetAudioEncoderConfigurations", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->GetAudioEncoderConfigurations(soap_tmp___ns1__GetAudioEncoderConfigurations.ns1__GetAudioEncoderConfigurations, ns1__GetAudioEncoderConfigurationsResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL; /* use SOAP literal style */
	soap_serializeheader(soap);
	ns1__GetAudioEncoderConfigurationsResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || ns1__GetAudioEncoderConfigurationsResponse.soap_put(soap, "ns1:GetAudioEncoderConfigurationsResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || ns1__GetAudioEncoderConfigurationsResponse.soap_put(soap, "ns1:GetAudioEncoderConfigurationsResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___ns1__GetAnalyticsConfigurations(struct soap *soap, Media2BindingService *service)
{	struct __ns1__GetAnalyticsConfigurations soap_tmp___ns1__GetAnalyticsConfigurations;
	_ns1__GetAnalyticsConfigurationsResponse ns1__GetAnalyticsConfigurationsResponse;
	ns1__GetAnalyticsConfigurationsResponse.soap_default(soap);
	soap_default___ns1__GetAnalyticsConfigurations(soap, &soap_tmp___ns1__GetAnalyticsConfigurations);
	if (!soap_get___ns1__GetAnalyticsConfigurations(soap, &soap_tmp___ns1__GetAnalyticsConfigurations, "-ns1:GetAnalyticsConfigurations", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->GetAnalyticsConfigurations(soap_tmp___ns1__GetAnalyticsConfigurations.ns1__GetAnalyticsConfigurations, ns1__GetAnalyticsConfigurationsResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL; /* use SOAP literal style */
	soap_serializeheader(soap);
	ns1__GetAnalyticsConfigurationsResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || ns1__GetAnalyticsConfigurationsResponse.soap_put(soap, "ns1:GetAnalyticsConfigurationsResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || ns1__GetAnalyticsConfigurationsResponse.soap_put(soap, "ns1:GetAnalyticsConfigurationsResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___ns1__GetMetadataConfigurations(struct soap *soap, Media2BindingService *service)
{	struct __ns1__GetMetadataConfigurations soap_tmp___ns1__GetMetadataConfigurations;
	_ns1__GetMetadataConfigurationsResponse ns1__GetMetadataConfigurationsResponse;
	ns1__GetMetadataConfigurationsResponse.soap_default(soap);
	soap_default___ns1__GetMetadataConfigurations(soap, &soap_tmp___ns1__GetMetadataConfigurations);
	if (!soap_get___ns1__GetMetadataConfigurations(soap, &soap_tmp___ns1__GetMetadataConfigurations, "-ns1:GetMetadataConfigurations", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->GetMetadataConfigurations(soap_tmp___ns1__GetMetadataConfigurations.ns1__GetMetadataConfigurations, ns1__GetMetadataConfigurationsResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL; /* use SOAP literal style */
	soap_serializeheader(soap);
	ns1__GetMetadataConfigurationsResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || ns1__GetMetadataConfigurationsResponse.soap_put(soap, "ns1:GetMetadataConfigurationsResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || ns1__GetMetadataConfigurationsResponse.soap_put(soap, "ns1:GetMetadataConfigurationsResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___ns1__GetAudioOutputConfigurations(struct soap *soap, Media2BindingService *service)
{	struct __ns1__GetAudioOutputConfigurations soap_tmp___ns1__GetAudioOutputConfigurations;
	_ns1__GetAudioOutputConfigurationsResponse ns1__GetAudioOutputConfigurationsResponse;
	ns1__GetAudioOutputConfigurationsResponse.soap_default(soap);
	soap_default___ns1__GetAudioOutputConfigurations(soap, &soap_tmp___ns1__GetAudioOutputConfigurations);
	if (!soap_get___ns1__GetAudioOutputConfigurations(soap, &soap_tmp___ns1__GetAudioOutputConfigurations, "-ns1:GetAudioOutputConfigurations", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->GetAudioOutputConfigurations(soap_tmp___ns1__GetAudioOutputConfigurations.ns1__GetAudioOutputConfigurations, ns1__GetAudioOutputConfigurationsResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL; /* use SOAP literal style */
	soap_serializeheader(soap);
	ns1__GetAudioOutputConfigurationsResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || ns1__GetAudioOutputConfigurationsResponse.soap_put(soap, "ns1:GetAudioOutputConfigurationsResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || ns1__GetAudioOutputConfigurationsResponse.soap_put(soap, "ns1:GetAudioOutputConfigurationsResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___ns1__GetAudioDecoderConfigurations(struct soap *soap, Media2BindingService *service)
{	struct __ns1__GetAudioDecoderConfigurations soap_tmp___ns1__GetAudioDecoderConfigurations;
	_ns1__GetAudioDecoderConfigurationsResponse ns1__GetAudioDecoderConfigurationsResponse;
	ns1__GetAudioDecoderConfigurationsResponse.soap_default(soap);
	soap_default___ns1__GetAudioDecoderConfigurations(soap, &soap_tmp___ns1__GetAudioDecoderConfigurations);
	if (!soap_get___ns1__GetAudioDecoderConfigurations(soap, &soap_tmp___ns1__GetAudioDecoderConfigurations, "-ns1:GetAudioDecoderConfigurations", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->GetAudioDecoderConfigurations(soap_tmp___ns1__GetAudioDecoderConfigurations.ns1__GetAudioDecoderConfigurations, ns1__GetAudioDecoderConfigurationsResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL; /* use SOAP literal style */
	soap_serializeheader(soap);
	ns1__GetAudioDecoderConfigurationsResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || ns1__GetAudioDecoderConfigurationsResponse.soap_put(soap, "ns1:GetAudioDecoderConfigurationsResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || ns1__GetAudioDecoderConfigurationsResponse.soap_put(soap, "ns1:GetAudioDecoderConfigurationsResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___ns1__SetVideoSourceConfiguration(struct soap *soap, Media2BindingService *service)
{	struct __ns1__SetVideoSourceConfiguration soap_tmp___ns1__SetVideoSourceConfiguration;
	ns1__SetConfigurationResponse ns1__SetVideoSourceConfigurationResponse;
	ns1__SetVideoSourceConfigurationResponse.soap_default(soap);
	soap_default___ns1__SetVideoSourceConfiguration(soap, &soap_tmp___ns1__SetVideoSourceConfiguration);
	if (!soap_get___ns1__SetVideoSourceConfiguration(soap, &soap_tmp___ns1__SetVideoSourceConfiguration, "-ns1:SetVideoSourceConfiguration", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->SetVideoSourceConfiguration(soap_tmp___ns1__SetVideoSourceConfiguration.ns1__SetVideoSourceConfiguration, ns1__SetVideoSourceConfigurationResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL; /* use SOAP literal style */
	soap_serializeheader(soap);
	ns1__SetVideoSourceConfigurationResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || ns1__SetVideoSourceConfigurationResponse.soap_put(soap, "ns1:SetVideoSourceConfigurationResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || ns1__SetVideoSourceConfigurationResponse.soap_put(soap, "ns1:SetVideoSourceConfigurationResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___ns1__SetVideoEncoderConfiguration(struct soap *soap, Media2BindingService *service)
{	struct __ns1__SetVideoEncoderConfiguration soap_tmp___ns1__SetVideoEncoderConfiguration;
	ns1__SetConfigurationResponse ns1__SetVideoEncoderConfigurationResponse;
	ns1__SetVideoEncoderConfigurationResponse.soap_default(soap);
	soap_default___ns1__SetVideoEncoderConfiguration(soap, &soap_tmp___ns1__SetVideoEncoderConfiguration);
	if (!soap_get___ns1__SetVideoEncoderConfiguration(soap, &soap_tmp___ns1__SetVideoEncoderConfiguration, "-ns1:SetVideoEncoderConfiguration", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->SetVideoEncoderConfiguration(soap_tmp___ns1__SetVideoEncoderConfiguration.ns1__SetVideoEncoderConfiguration, ns1__SetVideoEncoderConfigurationResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL; /* use SOAP literal style */
	soap_serializeheader(soap);
	ns1__SetVideoEncoderConfigurationResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || ns1__SetVideoEncoderConfigurationResponse.soap_put(soap, "ns1:SetVideoEncoderConfigurationResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || ns1__SetVideoEncoderConfigurationResponse.soap_put(soap, "ns1:SetVideoEncoderConfigurationResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___ns1__SetAudioSourceConfiguration(struct soap *soap, Media2BindingService *service)
{	struct __ns1__SetAudioSourceConfiguration soap_tmp___ns1__SetAudioSourceConfiguration;
	ns1__SetConfigurationResponse ns1__SetAudioSourceConfigurationResponse;
	ns1__SetAudioSourceConfigurationResponse.soap_default(soap);
	soap_default___ns1__SetAudioSourceConfiguration(soap, &soap_tmp___ns1__SetAudioSourceConfiguration);
	if (!soap_get___ns1__SetAudioSourceConfiguration(soap, &soap_tmp___ns1__SetAudioSourceConfiguration, "-ns1:SetAudioSourceConfiguration", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->SetAudioSourceConfiguration(soap_tmp___ns1__SetAudioSourceConfiguration.ns1__SetAudioSourceConfiguration, ns1__SetAudioSourceConfigurationResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL; /* use SOAP literal style */
	soap_serializeheader(soap);
	ns1__SetAudioSourceConfigurationResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || ns1__SetAudioSourceConfigurationResponse.soap_put(soap, "ns1:SetAudioSourceConfigurationResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || ns1__SetAudioSourceConfigurationResponse.soap_put(soap, "ns1:SetAudioSourceConfigurationResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___ns1__SetAudioEncoderConfiguration(struct soap *soap, Media2BindingService *service)
{	struct __ns1__SetAudioEncoderConfiguration soap_tmp___ns1__SetAudioEncoderConfiguration;
	ns1__SetConfigurationResponse ns1__SetAudioEncoderConfigurationResponse;
	ns1__SetAudioEncoderConfigurationResponse.soap_default(soap);
	soap_default___ns1__SetAudioEncoderConfiguration(soap, &soap_tmp___ns1__SetAudioEncoderConfiguration);
	if (!soap_get___ns1__SetAudioEncoderConfiguration(soap, &soap_tmp___ns1__SetAudioEncoderConfiguration, "-ns1:SetAudioEncoderConfiguration", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->SetAudioEncoderConfiguration(soap_tmp___ns1__SetAudioEncoderConfiguration.ns1__SetAudioEncoderConfiguration, ns1__SetAudioEncoderConfigurationResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL; /* use SOAP literal style */
	soap_serializeheader(soap);
	ns1__SetAudioEncoderConfigurationResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || ns1__SetAudioEncoderConfigurationResponse.soap_put(soap, "ns1:SetAudioEncoderConfigurationResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || ns1__SetAudioEncoderConfigurationResponse.soap_put(soap, "ns1:SetAudioEncoderConfigurationResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___ns1__SetMetadataConfiguration(struct soap *soap, Media2BindingService *service)
{	struct __ns1__SetMetadataConfiguration soap_tmp___ns1__SetMetadataConfiguration;
	ns1__SetConfigurationResponse ns1__SetMetadataConfigurationResponse;
	ns1__SetMetadataConfigurationResponse.soap_default(soap);
	soap_default___ns1__SetMetadataConfiguration(soap, &soap_tmp___ns1__SetMetadataConfiguration);
	if (!soap_get___ns1__SetMetadataConfiguration(soap, &soap_tmp___ns1__SetMetadataConfiguration, "-ns1:SetMetadataConfiguration", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->SetMetadataConfiguration(soap_tmp___ns1__SetMetadataConfiguration.ns1__SetMetadataConfiguration, ns1__SetMetadataConfigurationResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL; /* use SOAP literal style */
	soap_serializeheader(soap);
	ns1__SetMetadataConfigurationResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || ns1__SetMetadataConfigurationResponse.soap_put(soap, "ns1:SetMetadataConfigurationResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || ns1__SetMetadataConfigurationResponse.soap_put(soap, "ns1:SetMetadataConfigurationResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___ns1__SetAudioOutputConfiguration(struct soap *soap, Media2BindingService *service)
{	struct __ns1__SetAudioOutputConfiguration soap_tmp___ns1__SetAudioOutputConfiguration;
	ns1__SetConfigurationResponse ns1__SetAudioOutputConfigurationResponse;
	ns1__SetAudioOutputConfigurationResponse.soap_default(soap);
	soap_default___ns1__SetAudioOutputConfiguration(soap, &soap_tmp___ns1__SetAudioOutputConfiguration);
	if (!soap_get___ns1__SetAudioOutputConfiguration(soap, &soap_tmp___ns1__SetAudioOutputConfiguration, "-ns1:SetAudioOutputConfiguration", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->SetAudioOutputConfiguration(soap_tmp___ns1__SetAudioOutputConfiguration.ns1__SetAudioOutputConfiguration, ns1__SetAudioOutputConfigurationResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL; /* use SOAP literal style */
	soap_serializeheader(soap);
	ns1__SetAudioOutputConfigurationResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || ns1__SetAudioOutputConfigurationResponse.soap_put(soap, "ns1:SetAudioOutputConfigurationResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || ns1__SetAudioOutputConfigurationResponse.soap_put(soap, "ns1:SetAudioOutputConfigurationResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___ns1__SetAudioDecoderConfiguration(struct soap *soap, Media2BindingService *service)
{	struct __ns1__SetAudioDecoderConfiguration soap_tmp___ns1__SetAudioDecoderConfiguration;
	ns1__SetConfigurationResponse ns1__SetAudioDecoderConfigurationResponse;
	ns1__SetAudioDecoderConfigurationResponse.soap_default(soap);
	soap_default___ns1__SetAudioDecoderConfiguration(soap, &soap_tmp___ns1__SetAudioDecoderConfiguration);
	if (!soap_get___ns1__SetAudioDecoderConfiguration(soap, &soap_tmp___ns1__SetAudioDecoderConfiguration, "-ns1:SetAudioDecoderConfiguration", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->SetAudioDecoderConfiguration(soap_tmp___ns1__SetAudioDecoderConfiguration.ns1__SetAudioDecoderConfiguration, ns1__SetAudioDecoderConfigurationResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL; /* use SOAP literal style */
	soap_serializeheader(soap);
	ns1__SetAudioDecoderConfigurationResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || ns1__SetAudioDecoderConfigurationResponse.soap_put(soap, "ns1:SetAudioDecoderConfigurationResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || ns1__SetAudioDecoderConfigurationResponse.soap_put(soap, "ns1:SetAudioDecoderConfigurationResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___ns1__GetVideoSourceConfigurationOptions(struct soap *soap, Media2BindingService *service)
{	struct __ns1__GetVideoSourceConfigurationOptions soap_tmp___ns1__GetVideoSourceConfigurationOptions;
	_ns1__GetVideoSourceConfigurationOptionsResponse ns1__GetVideoSourceConfigurationOptionsResponse;
	ns1__GetVideoSourceConfigurationOptionsResponse.soap_default(soap);
	soap_default___ns1__GetVideoSourceConfigurationOptions(soap, &soap_tmp___ns1__GetVideoSourceConfigurationOptions);
	if (!soap_get___ns1__GetVideoSourceConfigurationOptions(soap, &soap_tmp___ns1__GetVideoSourceConfigurationOptions, "-ns1:GetVideoSourceConfigurationOptions", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->GetVideoSourceConfigurationOptions(soap_tmp___ns1__GetVideoSourceConfigurationOptions.ns1__GetVideoSourceConfigurationOptions, ns1__GetVideoSourceConfigurationOptionsResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL; /* use SOAP literal style */
	soap_serializeheader(soap);
	ns1__GetVideoSourceConfigurationOptionsResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || ns1__GetVideoSourceConfigurationOptionsResponse.soap_put(soap, "ns1:GetVideoSourceConfigurationOptionsResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || ns1__GetVideoSourceConfigurationOptionsResponse.soap_put(soap, "ns1:GetVideoSourceConfigurationOptionsResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___ns1__GetVideoEncoderConfigurationOptions(struct soap *soap, Media2BindingService *service)
{	struct __ns1__GetVideoEncoderConfigurationOptions soap_tmp___ns1__GetVideoEncoderConfigurationOptions;
	_ns1__GetVideoEncoderConfigurationOptionsResponse ns1__GetVideoEncoderConfigurationOptionsResponse;
	ns1__GetVideoEncoderConfigurationOptionsResponse.soap_default(soap);
	soap_default___ns1__GetVideoEncoderConfigurationOptions(soap, &soap_tmp___ns1__GetVideoEncoderConfigurationOptions);
	if (!soap_get___ns1__GetVideoEncoderConfigurationOptions(soap, &soap_tmp___ns1__GetVideoEncoderConfigurationOptions, "-ns1:GetVideoEncoderConfigurationOptions", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->GetVideoEncoderConfigurationOptions(soap_tmp___ns1__GetVideoEncoderConfigurationOptions.ns1__GetVideoEncoderConfigurationOptions, ns1__GetVideoEncoderConfigurationOptionsResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL; /* use SOAP literal style */
	soap_serializeheader(soap);
	ns1__GetVideoEncoderConfigurationOptionsResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || ns1__GetVideoEncoderConfigurationOptionsResponse.soap_put(soap, "ns1:GetVideoEncoderConfigurationOptionsResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || ns1__GetVideoEncoderConfigurationOptionsResponse.soap_put(soap, "ns1:GetVideoEncoderConfigurationOptionsResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___ns1__GetAudioSourceConfigurationOptions(struct soap *soap, Media2BindingService *service)
{	struct __ns1__GetAudioSourceConfigurationOptions soap_tmp___ns1__GetAudioSourceConfigurationOptions;
	_ns1__GetAudioSourceConfigurationOptionsResponse ns1__GetAudioSourceConfigurationOptionsResponse;
	ns1__GetAudioSourceConfigurationOptionsResponse.soap_default(soap);
	soap_default___ns1__GetAudioSourceConfigurationOptions(soap, &soap_tmp___ns1__GetAudioSourceConfigurationOptions);
	if (!soap_get___ns1__GetAudioSourceConfigurationOptions(soap, &soap_tmp___ns1__GetAudioSourceConfigurationOptions, "-ns1:GetAudioSourceConfigurationOptions", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->GetAudioSourceConfigurationOptions(soap_tmp___ns1__GetAudioSourceConfigurationOptions.ns1__GetAudioSourceConfigurationOptions, ns1__GetAudioSourceConfigurationOptionsResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL; /* use SOAP literal style */
	soap_serializeheader(soap);
	ns1__GetAudioSourceConfigurationOptionsResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || ns1__GetAudioSourceConfigurationOptionsResponse.soap_put(soap, "ns1:GetAudioSourceConfigurationOptionsResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || ns1__GetAudioSourceConfigurationOptionsResponse.soap_put(soap, "ns1:GetAudioSourceConfigurationOptionsResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___ns1__GetAudioEncoderConfigurationOptions(struct soap *soap, Media2BindingService *service)
{	struct __ns1__GetAudioEncoderConfigurationOptions soap_tmp___ns1__GetAudioEncoderConfigurationOptions;
	_ns1__GetAudioEncoderConfigurationOptionsResponse ns1__GetAudioEncoderConfigurationOptionsResponse;
	ns1__GetAudioEncoderConfigurationOptionsResponse.soap_default(soap);
	soap_default___ns1__GetAudioEncoderConfigurationOptions(soap, &soap_tmp___ns1__GetAudioEncoderConfigurationOptions);
	if (!soap_get___ns1__GetAudioEncoderConfigurationOptions(soap, &soap_tmp___ns1__GetAudioEncoderConfigurationOptions, "-ns1:GetAudioEncoderConfigurationOptions", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->GetAudioEncoderConfigurationOptions(soap_tmp___ns1__GetAudioEncoderConfigurationOptions.ns1__GetAudioEncoderConfigurationOptions, ns1__GetAudioEncoderConfigurationOptionsResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL; /* use SOAP literal style */
	soap_serializeheader(soap);
	ns1__GetAudioEncoderConfigurationOptionsResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || ns1__GetAudioEncoderConfigurationOptionsResponse.soap_put(soap, "ns1:GetAudioEncoderConfigurationOptionsResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || ns1__GetAudioEncoderConfigurationOptionsResponse.soap_put(soap, "ns1:GetAudioEncoderConfigurationOptionsResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___ns1__GetMetadataConfigurationOptions(struct soap *soap, Media2BindingService *service)
{	struct __ns1__GetMetadataConfigurationOptions soap_tmp___ns1__GetMetadataConfigurationOptions;
	_ns1__GetMetadataConfigurationOptionsResponse ns1__GetMetadataConfigurationOptionsResponse;
	ns1__GetMetadataConfigurationOptionsResponse.soap_default(soap);
	soap_default___ns1__GetMetadataConfigurationOptions(soap, &soap_tmp___ns1__GetMetadataConfigurationOptions);
	if (!soap_get___ns1__GetMetadataConfigurationOptions(soap, &soap_tmp___ns1__GetMetadataConfigurationOptions, "-ns1:GetMetadataConfigurationOptions", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->GetMetadataConfigurationOptions(soap_tmp___ns1__GetMetadataConfigurationOptions.ns1__GetMetadataConfigurationOptions, ns1__GetMetadataConfigurationOptionsResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL; /* use SOAP literal style */
	soap_serializeheader(soap);
	ns1__GetMetadataConfigurationOptionsResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || ns1__GetMetadataConfigurationOptionsResponse.soap_put(soap, "ns1:GetMetadataConfigurationOptionsResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || ns1__GetMetadataConfigurationOptionsResponse.soap_put(soap, "ns1:GetMetadataConfigurationOptionsResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___ns1__GetAudioOutputConfigurationOptions(struct soap *soap, Media2BindingService *service)
{	struct __ns1__GetAudioOutputConfigurationOptions soap_tmp___ns1__GetAudioOutputConfigurationOptions;
	_ns1__GetAudioOutputConfigurationOptionsResponse ns1__GetAudioOutputConfigurationOptionsResponse;
	ns1__GetAudioOutputConfigurationOptionsResponse.soap_default(soap);
	soap_default___ns1__GetAudioOutputConfigurationOptions(soap, &soap_tmp___ns1__GetAudioOutputConfigurationOptions);
	if (!soap_get___ns1__GetAudioOutputConfigurationOptions(soap, &soap_tmp___ns1__GetAudioOutputConfigurationOptions, "-ns1:GetAudioOutputConfigurationOptions", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->GetAudioOutputConfigurationOptions(soap_tmp___ns1__GetAudioOutputConfigurationOptions.ns1__GetAudioOutputConfigurationOptions, ns1__GetAudioOutputConfigurationOptionsResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL; /* use SOAP literal style */
	soap_serializeheader(soap);
	ns1__GetAudioOutputConfigurationOptionsResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || ns1__GetAudioOutputConfigurationOptionsResponse.soap_put(soap, "ns1:GetAudioOutputConfigurationOptionsResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || ns1__GetAudioOutputConfigurationOptionsResponse.soap_put(soap, "ns1:GetAudioOutputConfigurationOptionsResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___ns1__GetAudioDecoderConfigurationOptions(struct soap *soap, Media2BindingService *service)
{	struct __ns1__GetAudioDecoderConfigurationOptions soap_tmp___ns1__GetAudioDecoderConfigurationOptions;
	_ns1__GetAudioDecoderConfigurationOptionsResponse ns1__GetAudioDecoderConfigurationOptionsResponse;
	ns1__GetAudioDecoderConfigurationOptionsResponse.soap_default(soap);
	soap_default___ns1__GetAudioDecoderConfigurationOptions(soap, &soap_tmp___ns1__GetAudioDecoderConfigurationOptions);
	if (!soap_get___ns1__GetAudioDecoderConfigurationOptions(soap, &soap_tmp___ns1__GetAudioDecoderConfigurationOptions, "-ns1:GetAudioDecoderConfigurationOptions", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->GetAudioDecoderConfigurationOptions(soap_tmp___ns1__GetAudioDecoderConfigurationOptions.ns1__GetAudioDecoderConfigurationOptions, ns1__GetAudioDecoderConfigurationOptionsResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL; /* use SOAP literal style */
	soap_serializeheader(soap);
	ns1__GetAudioDecoderConfigurationOptionsResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || ns1__GetAudioDecoderConfigurationOptionsResponse.soap_put(soap, "ns1:GetAudioDecoderConfigurationOptionsResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || ns1__GetAudioDecoderConfigurationOptionsResponse.soap_put(soap, "ns1:GetAudioDecoderConfigurationOptionsResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___ns1__GetVideoEncoderInstances(struct soap *soap, Media2BindingService *service)
{	struct __ns1__GetVideoEncoderInstances soap_tmp___ns1__GetVideoEncoderInstances;
	_ns1__GetVideoEncoderInstancesResponse ns1__GetVideoEncoderInstancesResponse;
	ns1__GetVideoEncoderInstancesResponse.soap_default(soap);
	soap_default___ns1__GetVideoEncoderInstances(soap, &soap_tmp___ns1__GetVideoEncoderInstances);
	if (!soap_get___ns1__GetVideoEncoderInstances(soap, &soap_tmp___ns1__GetVideoEncoderInstances, "-ns1:GetVideoEncoderInstances", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->GetVideoEncoderInstances(soap_tmp___ns1__GetVideoEncoderInstances.ns1__GetVideoEncoderInstances, ns1__GetVideoEncoderInstancesResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL; /* use SOAP literal style */
	soap_serializeheader(soap);
	ns1__GetVideoEncoderInstancesResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || ns1__GetVideoEncoderInstancesResponse.soap_put(soap, "ns1:GetVideoEncoderInstancesResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || ns1__GetVideoEncoderInstancesResponse.soap_put(soap, "ns1:GetVideoEncoderInstancesResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___ns1__GetStreamUri(struct soap *soap, Media2BindingService *service)
{	struct __ns1__GetStreamUri soap_tmp___ns1__GetStreamUri;
	_ns1__GetStreamUriResponse ns1__GetStreamUriResponse;
	ns1__GetStreamUriResponse.soap_default(soap);
	soap_default___ns1__GetStreamUri(soap, &soap_tmp___ns1__GetStreamUri);
	if (!soap_get___ns1__GetStreamUri(soap, &soap_tmp___ns1__GetStreamUri, "-ns1:GetStreamUri", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->GetStreamUri(soap_tmp___ns1__GetStreamUri.ns1__GetStreamUri, ns1__GetStreamUriResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL; /* use SOAP literal style */
	soap_serializeheader(soap);
	ns1__GetStreamUriResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || ns1__GetStreamUriResponse.soap_put(soap, "ns1:GetStreamUriResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || ns1__GetStreamUriResponse.soap_put(soap, "ns1:GetStreamUriResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___ns1__StartMulticastStreaming(struct soap *soap, Media2BindingService *service)
{	struct __ns1__StartMulticastStreaming soap_tmp___ns1__StartMulticastStreaming;
	ns1__SetConfigurationResponse ns1__StartMulticastStreamingResponse;
	ns1__StartMulticastStreamingResponse.soap_default(soap);
	soap_default___ns1__StartMulticastStreaming(soap, &soap_tmp___ns1__StartMulticastStreaming);
	if (!soap_get___ns1__StartMulticastStreaming(soap, &soap_tmp___ns1__StartMulticastStreaming, "-ns1:StartMulticastStreaming", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->StartMulticastStreaming(soap_tmp___ns1__StartMulticastStreaming.ns1__StartMulticastStreaming, ns1__StartMulticastStreamingResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL; /* use SOAP literal style */
	soap_serializeheader(soap);
	ns1__StartMulticastStreamingResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || ns1__StartMulticastStreamingResponse.soap_put(soap, "ns1:StartMulticastStreamingResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || ns1__StartMulticastStreamingResponse.soap_put(soap, "ns1:StartMulticastStreamingResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___ns1__StopMulticastStreaming(struct soap *soap, Media2BindingService *service)
{	struct __ns1__StopMulticastStreaming soap_tmp___ns1__StopMulticastStreaming;
	ns1__SetConfigurationResponse ns1__StopMulticastStreamingResponse;
	ns1__StopMulticastStreamingResponse.soap_default(soap);
	soap_default___ns1__StopMulticastStreaming(soap, &soap_tmp___ns1__StopMulticastStreaming);
	if (!soap_get___ns1__StopMulticastStreaming(soap, &soap_tmp___ns1__StopMulticastStreaming, "-ns1:StopMulticastStreaming", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->StopMulticastStreaming(soap_tmp___ns1__StopMulticastStreaming.ns1__StopMulticastStreaming, ns1__StopMulticastStreamingResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL; /* use SOAP literal style */
	soap_serializeheader(soap);
	ns1__StopMulticastStreamingResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || ns1__StopMulticastStreamingResponse.soap_put(soap, "ns1:StopMulticastStreamingResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || ns1__StopMulticastStreamingResponse.soap_put(soap, "ns1:StopMulticastStreamingResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___ns1__SetSynchronizationPoint(struct soap *soap, Media2BindingService *service)
{	struct __ns1__SetSynchronizationPoint soap_tmp___ns1__SetSynchronizationPoint;
	_ns1__SetSynchronizationPointResponse ns1__SetSynchronizationPointResponse;
	ns1__SetSynchronizationPointResponse.soap_default(soap);
	soap_default___ns1__SetSynchronizationPoint(soap, &soap_tmp___ns1__SetSynchronizationPoint);
	if (!soap_get___ns1__SetSynchronizationPoint(soap, &soap_tmp___ns1__SetSynchronizationPoint, "-ns1:SetSynchronizationPoint", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->SetSynchronizationPoint(soap_tmp___ns1__SetSynchronizationPoint.ns1__SetSynchronizationPoint, ns1__SetSynchronizationPointResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL; /* use SOAP literal style */
	soap_serializeheader(soap);
	ns1__SetSynchronizationPointResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || ns1__SetSynchronizationPointResponse.soap_put(soap, "ns1:SetSynchronizationPointResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || ns1__SetSynchronizationPointResponse.soap_put(soap, "ns1:SetSynchronizationPointResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___ns1__GetSnapshotUri(struct soap *soap, Media2BindingService *service)
{	struct __ns1__GetSnapshotUri soap_tmp___ns1__GetSnapshotUri;
	_ns1__GetSnapshotUriResponse ns1__GetSnapshotUriResponse;
	ns1__GetSnapshotUriResponse.soap_default(soap);
	soap_default___ns1__GetSnapshotUri(soap, &soap_tmp___ns1__GetSnapshotUri);
	if (!soap_get___ns1__GetSnapshotUri(soap, &soap_tmp___ns1__GetSnapshotUri, "-ns1:GetSnapshotUri", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->GetSnapshotUri(soap_tmp___ns1__GetSnapshotUri.ns1__GetSnapshotUri, ns1__GetSnapshotUriResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL; /* use SOAP literal style */
	soap_serializeheader(soap);
	ns1__GetSnapshotUriResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || ns1__GetSnapshotUriResponse.soap_put(soap, "ns1:GetSnapshotUriResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || ns1__GetSnapshotUriResponse.soap_put(soap, "ns1:GetSnapshotUriResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___ns1__GetVideoSourceModes(struct soap *soap, Media2BindingService *service)
{	struct __ns1__GetVideoSourceModes soap_tmp___ns1__GetVideoSourceModes;
	_ns1__GetVideoSourceModesResponse ns1__GetVideoSourceModesResponse;
	ns1__GetVideoSourceModesResponse.soap_default(soap);
	soap_default___ns1__GetVideoSourceModes(soap, &soap_tmp___ns1__GetVideoSourceModes);
	if (!soap_get___ns1__GetVideoSourceModes(soap, &soap_tmp___ns1__GetVideoSourceModes, "-ns1:GetVideoSourceModes", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->GetVideoSourceModes(soap_tmp___ns1__GetVideoSourceModes.ns1__GetVideoSourceModes, ns1__GetVideoSourceModesResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL; /* use SOAP literal style */
	soap_serializeheader(soap);
	ns1__GetVideoSourceModesResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || ns1__GetVideoSourceModesResponse.soap_put(soap, "ns1:GetVideoSourceModesResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || ns1__GetVideoSourceModesResponse.soap_put(soap, "ns1:GetVideoSourceModesResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___ns1__SetVideoSourceMode(struct soap *soap, Media2BindingService *service)
{	struct __ns1__SetVideoSourceMode soap_tmp___ns1__SetVideoSourceMode;
	_ns1__SetVideoSourceModeResponse ns1__SetVideoSourceModeResponse;
	ns1__SetVideoSourceModeResponse.soap_default(soap);
	soap_default___ns1__SetVideoSourceMode(soap, &soap_tmp___ns1__SetVideoSourceMode);
	if (!soap_get___ns1__SetVideoSourceMode(soap, &soap_tmp___ns1__SetVideoSourceMode, "-ns1:SetVideoSourceMode", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->SetVideoSourceMode(soap_tmp___ns1__SetVideoSourceMode.ns1__SetVideoSourceMode, ns1__SetVideoSourceModeResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL; /* use SOAP literal style */
	soap_serializeheader(soap);
	ns1__SetVideoSourceModeResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || ns1__SetVideoSourceModeResponse.soap_put(soap, "ns1:SetVideoSourceModeResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || ns1__SetVideoSourceModeResponse.soap_put(soap, "ns1:SetVideoSourceModeResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___ns1__GetOSDs(struct soap *soap, Media2BindingService *service)
{	struct __ns1__GetOSDs soap_tmp___ns1__GetOSDs;
	_ns1__GetOSDsResponse ns1__GetOSDsResponse;
	ns1__GetOSDsResponse.soap_default(soap);
	soap_default___ns1__GetOSDs(soap, &soap_tmp___ns1__GetOSDs);
	if (!soap_get___ns1__GetOSDs(soap, &soap_tmp___ns1__GetOSDs, "-ns1:GetOSDs", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->GetOSDs(soap_tmp___ns1__GetOSDs.ns1__GetOSDs, ns1__GetOSDsResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL; /* use SOAP literal style */
	soap_serializeheader(soap);
	ns1__GetOSDsResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || ns1__GetOSDsResponse.soap_put(soap, "ns1:GetOSDsResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || ns1__GetOSDsResponse.soap_put(soap, "ns1:GetOSDsResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___ns1__GetOSDOptions(struct soap *soap, Media2BindingService *service)
{	struct __ns1__GetOSDOptions soap_tmp___ns1__GetOSDOptions;
	_ns1__GetOSDOptionsResponse ns1__GetOSDOptionsResponse;
	ns1__GetOSDOptionsResponse.soap_default(soap);
	soap_default___ns1__GetOSDOptions(soap, &soap_tmp___ns1__GetOSDOptions);
	if (!soap_get___ns1__GetOSDOptions(soap, &soap_tmp___ns1__GetOSDOptions, "-ns1:GetOSDOptions", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->GetOSDOptions(soap_tmp___ns1__GetOSDOptions.ns1__GetOSDOptions, ns1__GetOSDOptionsResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL; /* use SOAP literal style */
	soap_serializeheader(soap);
	ns1__GetOSDOptionsResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || ns1__GetOSDOptionsResponse.soap_put(soap, "ns1:GetOSDOptionsResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || ns1__GetOSDOptionsResponse.soap_put(soap, "ns1:GetOSDOptionsResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___ns1__SetOSD(struct soap *soap, Media2BindingService *service)
{	struct __ns1__SetOSD soap_tmp___ns1__SetOSD;
	ns1__SetConfigurationResponse ns1__SetOSDResponse;
	ns1__SetOSDResponse.soap_default(soap);
	soap_default___ns1__SetOSD(soap, &soap_tmp___ns1__SetOSD);
	if (!soap_get___ns1__SetOSD(soap, &soap_tmp___ns1__SetOSD, "-ns1:SetOSD", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->SetOSD(soap_tmp___ns1__SetOSD.ns1__SetOSD, ns1__SetOSDResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL; /* use SOAP literal style */
	soap_serializeheader(soap);
	ns1__SetOSDResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || ns1__SetOSDResponse.soap_put(soap, "ns1:SetOSDResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || ns1__SetOSDResponse.soap_put(soap, "ns1:SetOSDResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___ns1__CreateOSD(struct soap *soap, Media2BindingService *service)
{	struct __ns1__CreateOSD soap_tmp___ns1__CreateOSD;
	_ns1__CreateOSDResponse ns1__CreateOSDResponse;
	ns1__CreateOSDResponse.soap_default(soap);
	soap_default___ns1__CreateOSD(soap, &soap_tmp___ns1__CreateOSD);
	if (!soap_get___ns1__CreateOSD(soap, &soap_tmp___ns1__CreateOSD, "-ns1:CreateOSD", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->CreateOSD(soap_tmp___ns1__CreateOSD.ns1__CreateOSD, ns1__CreateOSDResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL; /* use SOAP literal style */
	soap_serializeheader(soap);
	ns1__CreateOSDResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || ns1__CreateOSDResponse.soap_put(soap, "ns1:CreateOSDResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || ns1__CreateOSDResponse.soap_put(soap, "ns1:CreateOSDResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___ns1__DeleteOSD(struct soap *soap, Media2BindingService *service)
{	struct __ns1__DeleteOSD soap_tmp___ns1__DeleteOSD;
	ns1__SetConfigurationResponse ns1__DeleteOSDResponse;
	ns1__DeleteOSDResponse.soap_default(soap);
	soap_default___ns1__DeleteOSD(soap, &soap_tmp___ns1__DeleteOSD);
	if (!soap_get___ns1__DeleteOSD(soap, &soap_tmp___ns1__DeleteOSD, "-ns1:DeleteOSD", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->DeleteOSD(soap_tmp___ns1__DeleteOSD.ns1__DeleteOSD, ns1__DeleteOSDResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL; /* use SOAP literal style */
	soap_serializeheader(soap);
	ns1__DeleteOSDResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || ns1__DeleteOSDResponse.soap_put(soap, "ns1:DeleteOSDResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || ns1__DeleteOSDResponse.soap_put(soap, "ns1:DeleteOSDResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___ns1__GetMasks(struct soap *soap, Media2BindingService *service)
{	struct __ns1__GetMasks soap_tmp___ns1__GetMasks;
	_ns1__GetMasksResponse ns1__GetMasksResponse;
	ns1__GetMasksResponse.soap_default(soap);
	soap_default___ns1__GetMasks(soap, &soap_tmp___ns1__GetMasks);
	if (!soap_get___ns1__GetMasks(soap, &soap_tmp___ns1__GetMasks, "-ns1:GetMasks", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->GetMasks(soap_tmp___ns1__GetMasks.ns1__GetMasks, ns1__GetMasksResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL; /* use SOAP literal style */
	soap_serializeheader(soap);
	ns1__GetMasksResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || ns1__GetMasksResponse.soap_put(soap, "ns1:GetMasksResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || ns1__GetMasksResponse.soap_put(soap, "ns1:GetMasksResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___ns1__GetMaskOptions(struct soap *soap, Media2BindingService *service)
{	struct __ns1__GetMaskOptions soap_tmp___ns1__GetMaskOptions;
	_ns1__GetMaskOptionsResponse ns1__GetMaskOptionsResponse;
	ns1__GetMaskOptionsResponse.soap_default(soap);
	soap_default___ns1__GetMaskOptions(soap, &soap_tmp___ns1__GetMaskOptions);
	if (!soap_get___ns1__GetMaskOptions(soap, &soap_tmp___ns1__GetMaskOptions, "-ns1:GetMaskOptions", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->GetMaskOptions(soap_tmp___ns1__GetMaskOptions.ns1__GetMaskOptions, ns1__GetMaskOptionsResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL; /* use SOAP literal style */
	soap_serializeheader(soap);
	ns1__GetMaskOptionsResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || ns1__GetMaskOptionsResponse.soap_put(soap, "ns1:GetMaskOptionsResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || ns1__GetMaskOptionsResponse.soap_put(soap, "ns1:GetMaskOptionsResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___ns1__SetMask(struct soap *soap, Media2BindingService *service)
{	struct __ns1__SetMask soap_tmp___ns1__SetMask;
	ns1__SetConfigurationResponse ns1__SetMaskResponse;
	ns1__SetMaskResponse.soap_default(soap);
	soap_default___ns1__SetMask(soap, &soap_tmp___ns1__SetMask);
	if (!soap_get___ns1__SetMask(soap, &soap_tmp___ns1__SetMask, "-ns1:SetMask", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->SetMask(soap_tmp___ns1__SetMask.ns1__SetMask, ns1__SetMaskResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL; /* use SOAP literal style */
	soap_serializeheader(soap);
	ns1__SetMaskResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || ns1__SetMaskResponse.soap_put(soap, "ns1:SetMaskResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || ns1__SetMaskResponse.soap_put(soap, "ns1:SetMaskResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___ns1__CreateMask(struct soap *soap, Media2BindingService *service)
{	struct __ns1__CreateMask soap_tmp___ns1__CreateMask;
	_ns1__CreateMaskResponse ns1__CreateMaskResponse;
	ns1__CreateMaskResponse.soap_default(soap);
	soap_default___ns1__CreateMask(soap, &soap_tmp___ns1__CreateMask);
	if (!soap_get___ns1__CreateMask(soap, &soap_tmp___ns1__CreateMask, "-ns1:CreateMask", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->CreateMask(soap_tmp___ns1__CreateMask.ns1__CreateMask, ns1__CreateMaskResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL; /* use SOAP literal style */
	soap_serializeheader(soap);
	ns1__CreateMaskResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || ns1__CreateMaskResponse.soap_put(soap, "ns1:CreateMaskResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || ns1__CreateMaskResponse.soap_put(soap, "ns1:CreateMaskResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___ns1__DeleteMask(struct soap *soap, Media2BindingService *service)
{	struct __ns1__DeleteMask soap_tmp___ns1__DeleteMask;
	ns1__SetConfigurationResponse ns1__DeleteMaskResponse;
	ns1__DeleteMaskResponse.soap_default(soap);
	soap_default___ns1__DeleteMask(soap, &soap_tmp___ns1__DeleteMask);
	if (!soap_get___ns1__DeleteMask(soap, &soap_tmp___ns1__DeleteMask, "-ns1:DeleteMask", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->DeleteMask(soap_tmp___ns1__DeleteMask.ns1__DeleteMask, ns1__DeleteMaskResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL; /* use SOAP literal style */
	soap_serializeheader(soap);
	ns1__DeleteMaskResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || ns1__DeleteMaskResponse.soap_put(soap, "ns1:DeleteMaskResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || ns1__DeleteMaskResponse.soap_put(soap, "ns1:DeleteMaskResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___ns1__GetWebRTCConfigurations(struct soap *soap, Media2BindingService *service)
{	struct __ns1__GetWebRTCConfigurations soap_tmp___ns1__GetWebRTCConfigurations;
	_ns1__GetWebRTCConfigurationsResponse ns1__GetWebRTCConfigurationsResponse;
	ns1__GetWebRTCConfigurationsResponse.soap_default(soap);
	soap_default___ns1__GetWebRTCConfigurations(soap, &soap_tmp___ns1__GetWebRTCConfigurations);
	if (!soap_get___ns1__GetWebRTCConfigurations(soap, &soap_tmp___ns1__GetWebRTCConfigurations, "-ns1:GetWebRTCConfigurations", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->GetWebRTCConfigurations(soap_tmp___ns1__GetWebRTCConfigurations.ns1__GetWebRTCConfigurations, ns1__GetWebRTCConfigurationsResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL; /* use SOAP literal style */
	soap_serializeheader(soap);
	ns1__GetWebRTCConfigurationsResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || ns1__GetWebRTCConfigurationsResponse.soap_put(soap, "ns1:GetWebRTCConfigurationsResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || ns1__GetWebRTCConfigurationsResponse.soap_put(soap, "ns1:GetWebRTCConfigurationsResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve___ns1__SetWebRTCConfigurations(struct soap *soap, Media2BindingService *service)
{	struct __ns1__SetWebRTCConfigurations soap_tmp___ns1__SetWebRTCConfigurations;
	_ns1__SetWebRTCConfigurationsResponse ns1__SetWebRTCConfigurationsResponse;
	ns1__SetWebRTCConfigurationsResponse.soap_default(soap);
	soap_default___ns1__SetWebRTCConfigurations(soap, &soap_tmp___ns1__SetWebRTCConfigurations);
	if (!soap_get___ns1__SetWebRTCConfigurations(soap, &soap_tmp___ns1__SetWebRTCConfigurations, "-ns1:SetWebRTCConfigurations", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = service->SetWebRTCConfigurations(soap_tmp___ns1__SetWebRTCConfigurations.ns1__SetWebRTCConfigurations, ns1__SetWebRTCConfigurationsResponse);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL; /* use SOAP literal style */
	soap_serializeheader(soap);
	ns1__SetWebRTCConfigurationsResponse.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || ns1__SetWebRTCConfigurationsResponse.soap_put(soap, "ns1:SetWebRTCConfigurationsResponse", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || ns1__SetWebRTCConfigurationsResponse.soap_put(soap, "ns1:SetWebRTCConfigurationsResponse", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}
/* End of server object code */
